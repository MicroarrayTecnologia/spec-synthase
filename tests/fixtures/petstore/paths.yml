paths:
  /pet:
    post:
      consumes: [application/json, application/xml]
      description: ''
      operationId: addPet
      parameters:
      - description: Pet object that needs to be added to the store
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/Pet'}
      produces: [application/xml, application/json]
      responses:
        '405': {description: Invalid input}
      security:
      - petstore_auth: ['write:pets', 'read:pets']
      summary: Add a new pet to the store
      tags: [pet]
    put:
      consumes: [application/json, application/xml]
      description: ''
      operationId: updatePet
      parameters:
      - description: Pet object that needs to be added to the store
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/Pet'}
      produces: [application/xml, application/json]
      responses:
        '400': {description: Invalid ID supplied}
        '404': {description: Pet not found}
        '405': {description: Validation exception}
      security:
      - petstore_auth: ['write:pets', 'read:pets']
      summary: Update an existing pet
      tags: [pet]
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - collectionFormat: multi
        description: Status values that need to be considered for filter
        in: query
        items:
          default: available
          enum: [available, pending, sold]
          type: string
        name: status
        required: true
        type: array
      produces: [application/xml, application/json]
      responses:
        '200':
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Pet'}
            type: array
        '400': {description: Invalid status value}
      security:
      - petstore_auth: ['write:pets', 'read:pets']
      summary: Finds Pets by status
      tags: [pet]
  /pet/findByTags:
    get:
      deprecated: true
      description: Muliple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - collectionFormat: multi
        description: Tags to filter by
        in: query
        items: {type: string}
        name: tags
        required: true
        type: array
      produces: [application/xml, application/json]
      responses:
        '200':
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Pet'}
            type: array
        '400': {description: Invalid tag value}
      security:
      - petstore_auth: ['write:pets', 'read:pets']
      summary: Finds Pets by tags
      tags: [pet]
  /pet/{petId}:
    delete:
      description: ''
      operationId: deletePet
      parameters:
      - {in: header, name: api_key, required: false, type: string}
      - {description: Pet id to delete, format: int64, in: path, name: petId, required: true,
        type: integer}
      produces: [application/xml, application/json]
      responses:
        '400': {description: Invalid ID supplied}
        '404': {description: Pet not found}
      security:
      - petstore_auth: ['write:pets', 'read:pets']
      summary: Deletes a pet
      tags: [pet]
    get:
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - {description: ID of pet to return, format: int64, in: path, name: petId, required: true,
        type: integer}
      produces: [application/xml, application/json]
      responses:
        '200':
          description: successful operation
          schema: {$ref: '#/definitions/Pet'}
        '400': {description: Invalid ID supplied}
        '404': {description: Pet not found}
      security:
      - api_key: []
      summary: Find pet by ID
      tags: [pet]
    post:
      consumes: [application/x-www-form-urlencoded]
      description: ''
      operationId: updatePetWithForm
      parameters:
      - {description: ID of pet that needs to be updated, format: int64, in: path,
        name: petId, required: true, type: integer}
      - {description: Updated name of the pet, in: formData, name: name, required: false,
        type: string}
      - {description: Updated status of the pet, in: formData, name: status, required: false,
        type: string}
      produces: [application/xml, application/json]
      responses:
        '405': {description: Invalid input}
      security:
      - petstore_auth: ['write:pets', 'read:pets']
      summary: Updates a pet in the store with form data
      tags: [pet]
  /pet/{petId}/uploadImage:
    post:
      consumes: [multipart/form-data]
      description: ''
      operationId: uploadFile
      parameters:
      - {description: ID of pet to update, format: int64, in: path, name: petId, required: true,
        type: integer}
      - {description: Additional data to pass to server, in: formData, name: additionalMetadata,
        required: false, type: string}
      - {description: file to upload, in: formData, name: file, required: false, type: file}
      produces: [application/json]
      responses:
        '200':
          description: successful operation
          schema: {$ref: '#/definitions/ApiResponse'}
      security:
      - petstore_auth: ['write:pets', 'read:pets']
      summary: uploads an image
      tags: [pet]
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      parameters: []
      produces: [application/json]
      responses:
        '200':
          description: successful operation
          schema:
            additionalProperties: {format: int32, type: integer}
            type: object
      security:
      - api_key: []
      summary: Returns pet inventories by status
      tags: [store]
  /store/order:
    post:
      description: ''
      operationId: placeOrder
      parameters:
      - description: order placed for purchasing the pet
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/Order'}
      produces: [application/xml, application/json]
      responses:
        '200':
          description: successful operation
          schema: {$ref: '#/definitions/Order'}
        '400': {description: Invalid Order}
      summary: Place an order for a pet
      tags: [store]
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - {description: ID of the order that needs to be deleted, format: int64, in: path,
        minimum: 1.0, name: orderId, required: true, type: integer}
      produces: [application/xml, application/json]
      responses:
        '400': {description: Invalid ID supplied}
        '404': {description: Order not found}
      summary: Delete purchase order by ID
      tags: [store]
    get:
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - {description: ID of pet that needs to be fetched, format: int64, in: path,
        maximum: 10.0, minimum: 1.0, name: orderId, required: true, type: integer}
      produces: [application/xml, application/json]
      responses:
        '200':
          description: successful operation
          schema: {$ref: '#/definitions/Order'}
        '400': {description: Invalid ID supplied}
        '404': {description: Order not found}
      summary: Find purchase order by ID
      tags: [store]
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      parameters:
      - description: Created user object
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/User'}
      produces: [application/xml, application/json]
      responses:
        default: {description: successful operation}
      summary: Create user
      tags: [user]
  /user/createWithArray:
    post:
      description: ''
      operationId: createUsersWithArrayInput
      parameters:
      - description: List of user object
        in: body
        name: body
        required: true
        schema:
          items: {$ref: '#/definitions/User'}
          type: array
      produces: [application/xml, application/json]
      responses:
        default: {description: successful operation}
      summary: Creates list of users with given input array
      tags: [user]
  /user/createWithList:
    post:
      description: ''
      operationId: createUsersWithListInput
      parameters:
      - description: List of user object
        in: body
        name: body
        required: true
        schema:
          items: {$ref: '#/definitions/User'}
          type: array
      produces: [application/xml, application/json]
      responses:
        default: {description: successful operation}
      summary: Creates list of users with given input array
      tags: [user]
  /user/login:
    get:
      description: ''
      operationId: loginUser
      parameters:
      - {description: The user name for login, in: query, name: username, required: true,
        type: string}
      - {description: The password for login in clear text, in: query, name: password,
        required: true, type: string}
      produces: [application/xml, application/json]
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After: {description: date in UTC when token expires, format: date-time,
              type: string}
            X-Rate-Limit: {description: calls per hour allowed by the user, format: int32,
              type: integer}
          schema: {type: string}
        '400': {description: Invalid username/password supplied}
      summary: Logs user into the system
      tags: [user]
  /user/logout:
    get:
      description: ''
      operationId: logoutUser
      parameters: []
      produces: [application/xml, application/json]
      responses:
        default: {description: successful operation}
      summary: Logs out current logged in user session
      tags: [user]
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - {description: The name that needs to be deleted, in: path, name: username,
        required: true, type: string}
      produces: [application/xml, application/json]
      responses:
        '400': {description: Invalid username supplied}
        '404': {description: User not found}
      summary: Delete user
      tags: [user]
    get:
      description: ''
      operationId: getUserByName
      parameters:
      - {description: 'The name that needs to be fetched. Use user1 for testing. ',
        in: path, name: username, required: true, type: string}
      produces: [application/xml, application/json]
      responses:
        '200':
          description: successful operation
          schema: {$ref: '#/definitions/User'}
        '400': {description: Invalid username supplied}
        '404': {description: User not found}
      summary: Get user by user name
      tags: [user]
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - {description: name that need to be updated, in: path, name: username, required: true,
        type: string}
      - description: Updated user object
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/User'}
      produces: [application/xml, application/json]
      responses:
        '400': {description: Invalid user supplied}
        '404': {description: User not found}
      summary: Updated user
      tags: [user]
